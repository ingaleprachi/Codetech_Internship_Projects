import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class EnhancedPasswordStrengthChecker {

    // Predefined list of common passwords
    private static final Set<String> commonPasswords = Set.of(
        "123456", "password", "123456789", "12345678", "qwerty", "abc123",
        "password1", "admin", "letmein", "welcome", "iloveyou"
    );

    // To store previously used passwords
    private static Set<String> usedPasswords = new HashSet<>();

    // Method to check password strength
    public static String checkPasswordStrength(String password) {
        int score = 0;

        // Check length of password
        if (password.length() >= 8) {
            score++;
        }

        // Check if password contains lowercase letters
        if (password.matches(".*[a-z].*")) {
            score++;
        }

        // Check if password contains uppercase letters
        if (password.matches(".*[A-Z].*")) {
            score++;
        }

        // Check if password contains digits
        if (password.matches(".*[0-9].*")) {
            score++;
        }

        // Check if password contains special characters
        if (password.matches(".*[!@#$%^&*()-+=<>?/{}~|].*")) {
            score++;
        }

        // Check if password is common
        if (commonPasswords.contains(password)) {
            return "Password Strength: Very Weak (Common Password)";
        }

        // Check if password was used before
        if (usedPasswords.contains(password)) {
            return "Password Strength: Weak (Password Reuse Detected)";
        }

        // Add password to used passwords set
        usedPasswords.add(password);

        // Provide feedback based on score
        switch (score) {
            case 5:
                return "Password Strength: Very Strong";
            case 4:
                return "Password Strength: Strong";
            case 3:
                return "Password Strength: Moderate";
            case 2:
                return "Password Strength: Weak";
            default:
                return "Password Strength: Very Weak";
        }
    }

    // Method to calculate password entropy
    public static double calculateEntropy(String password) {
        int charsetSize = 0;

        if (password.matches(".*[a-z].*")) charsetSize += 26;  // Lowercase
        if (password.matches(".*[A-Z].*")) charsetSize += 26;  // Uppercase
        if (password.matches(".*[0-9].*")) charsetSize += 10;  // Digits
        if (password.matches(".*[!@#$%^&*()-+=<>?/{}~|].*")) charsetSize += 32;  // Special characters

        // Entropy formula: log2(charsetSize ^ length)
        return Math.log(Math.pow(charsetSize, password.length())) / Math.log(2);
    }

    // Estimate time to crack password
    public static String estimateCrackTime(double entropy) {
        long guessesPerSecond = 1000000000; // Assumption: 1 billion guesses per second
        double secondsToCrack = Math.pow(2, entropy) / guessesPerSecond;

        if (secondsToCrack < 60) {
            return "Estimated time to crack: " + (int) secondsToCrack + " seconds.";
        } else if (secondsToCrack < 3600) {
            return "Estimated time to crack: " + (int) (secondsToCrack / 60) + " minutes.";
        } else if (secondsToCrack < 86400) {
            return "Estimated time to crack: " + (int) (secondsToCrack / 3600) + " hours.";
        } else if (secondsToCrack < 31536000) {
            return "Estimated time to crack: " + (int) (secondsToCrack / 86400) + " days.";
        } else {
            return "Estimated time to crack: " + (int) (secondsToCrack / 31536000) + " years.";
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt user to enter password
        System.out.print("Enter your password: ");
        String password = scanner.nextLine();

        // Check the strength of the password
        String strength = checkPasswordStrength(password);

        // Calculate password entropy
        double entropy = calculateEntropy(password);

        // Estimate time to crack the password
        String crackTime = estimateCrackTime(entropy);

        // Display the results
        System.out.println(strength);
        System.out.println("Password Entropy: " + entropy + " bits");
        System.out.println(crackTime);
    }
}
