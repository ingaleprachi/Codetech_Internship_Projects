import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.URL;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import javax.net.ssl.HttpsURLConnection;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class VulnerabilityScanner {

    // Method to scan open ports
    public static void scanOpenPorts(String host, int[] ports) {
        System.out.println("Scanning open ports...");
        for (int port : ports) {
            try (Socket socket = new Socket()) {
                socket.connect(new InetSocketAddress(host, port), 200);
                System.out.println("Port " + port + " is open.");
            } catch (IOException e) {
                // Port is closed or blocked
            }
        }
    }

    // Method to check outdated server software versions
    public static void checkSoftwareVersion(String host) throws IOException {
        System.out.println("Checking for outdated server software...");
        URL url = new URL("http://" + host);
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.connect();

        String serverInfo = connection.getHeaderField("Server");
        if (serverInfo != null) {
            System.out.println("Server Info: " + serverInfo);
            // Check for outdated versions (you would have a list of known vulnerable versions here)
            if (serverInfo.contains("Apache/2.2")) {
                System.out.println("Warning: Detected outdated Apache version.");
            } else {
                System.out.println("Server software version looks up-to-date.");
            }
        }
    }

    // Method to check for SSL certificate issues
    public static void checkSSLCertificate(String host) {
        try {
            URL url = new URL("https://" + host);
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.connect();

            Certificate[] certs = connection.getServerCertificates();
            for (Certificate cert : certs) {
                if (cert instanceof X509Certificate) {
                    X509Certificate x509Cert = (X509Certificate) cert;
                    System.out.println("Certificate Information: ");
                    System.out.println("Issuer: " + x509Cert.getIssuerDN());
                    System.out.println("Expiration Date: " + x509Cert.getNotAfter());

                    // Check if certificate is expired
                    if (x509Cert.getNotAfter().getTime() < System.currentTimeMillis()) {
                        System.out.println("Warning: SSL certificate is expired.");
                    } else {
                        System.out.println("SSL certificate is valid.");
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error checking SSL certificate: " + e.getMessage());
        }
    }

    // Directory traversal attack testing
    public static void testDirectoryTraversal(String host) {
        System.out.println("Testing for directory traversal vulnerability...");
        String[] testPaths = { "/../../etc/passwd", "/../../../windows/system32", "/../../boot.ini" };
        try {
            for (String path : testPaths) {
                URL url = new URL("http://" + host + path);
                HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
                connection.setRequestMethod("GET");

                int responseCode = connection.getResponseCode();
                if (responseCode == 200) {
                    System.out.println("Potential directory traversal vulnerability detected: " + path);
                }
            }
        } catch (IOException e) {
            System.out.println("Error testing directory traversal: " + e.getMessage());
        }
    }

    // Method to scan for missing HTTP security headers
    public static void checkMissingSecurityHeaders(String host) throws IOException {
        System.out.println("Checking for missing security headers...");
        URL url = new URL("http://" + host);
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
        connection.connect();

        String[] securityHeaders = { "X-Content-Type-Options", "X-Frame-Options", "Strict-Transport-Security", "Content-Security-Policy" };

        for (String header : securityHeaders) {
            if (connection.getHeaderField(header) == null) {
                System.out.println("Missing security header: " + header);
            }
        }
    }

    // Brute force detection (Example: Detecting failed login attempts from logs)
    public static void detectBruteForce(String logContent) {
        System.out.println("Detecting brute force attacks...");
        Pattern pattern = Pattern.compile("Failed login from IP: (\\d+\\.\\d+\\.\\d+\\.\\d+)");
        Matcher matcher = pattern.matcher(logContent);

        while (matcher.find()) {
            System.out.println("Potential brute force attempt from IP: " + matcher.group(1));
        }
    }

    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter target host: ");
        String host = scanner.nextLine();
        
        // Scan open ports
        int[] ports = { 80, 443, 8080, 22, 21 }; // Common ports
        scanOpenPorts(host, ports);

        // Check outdated software version
        checkSoftwareVersion(host);

        // Check SSL certificate issues
        checkSSLCertificate(host);

        // Test for directory traversal
        testDirectoryTraversal(host);

        // Check for missing HTTP security headers
        checkMissingSecurityHeaders(host);

        // Detect brute force attempts (Example log content for demonstration)
        String sampleLogContent = "Failed login from IP: 192.168.1.10\nFailed login from IP: 192.168.1.11";
        detectBruteForce(sampleLogContent);
    }
}
